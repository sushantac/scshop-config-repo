server:
  port: ${port:8004}

spring:
  application:
    name: order-service
  jpa:
    show-sql: true
  h2:
    console:
      enabled: true
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: ${ISSUER_URI:http://localhost:7999/auth/realms/sc-shop}
        registration:
          order-service:
            provider: keycloak
            client-id: order-service
            client-secret: ae2b3843-edfe-48c0-9f08-26a3ffa8a5b9
            authorization-grant-type: client_credentials
            scope: product
  cloud:
    config:
      uri: ${CONFIG_SERVER:http://localhost:8011}
  kafka:
    consumer:
      bootstrap-servers: ${KAFKA_SERVER:localhost:9072}
      group-id: order_group
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: "*"
    producer:
      acks: all
      bootstrap-servers: ${KAFKA_SERVER:localhost:9072}
      key-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

management:
  endpoints:
    web:
      exposure:
        include: "*"

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://localhost:8012/eureka/}
    healthcheck:
      enabled: true


app:
  order:
    shipping:
      standard-charges: 20
    kafka:
      topic: 
        order-topic: order_topic2
